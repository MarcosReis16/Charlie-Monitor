#!/usr/bin/env python3
"""
Monitor de Pre√ßos StayCharlie - Vers√£o Cloud
Adaptado para hospedagem gratuita (Railway, Render, Fly.io)
"""

import os
import json
import time
import logging
import requests
import argparse
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from webdriver_manager.chrome import ChromeDriverManager
import re

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/app/data/price_monitor.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class StayCharliePriceMonitorCloud:
    def __init__(self):
        # Configura√ß√µes via vari√°veis de ambiente
        self.url = os.getenv('MONITOR_URL', 'https://www.staycharlie.com.br/charlie-nik-pinheiros?city=SP&start_date=2025-09-08&end_date=2025-09-12&guests=1')
        self.price_history_file = '/app/data/price_history.json'
        self.telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.check_interval = int(os.getenv('CHECK_INTERVAL_MINUTES', '30'))
        self.price_threshold = float(os.getenv('PRICE_THRESHOLD_PERCENT', '5.0'))
        self.discount_percent = float(os.getenv('DISCOUNT_PERCENT', '25.0'))
        
        logger.info("üöÄ StayCharlie Monitor Cloud iniciado")
        logger.info(f"üìç URL: {self.url}")
        logger.info(f"‚è∞ Intervalo: {self.check_interval} minutos")
        logger.info(f"üìâ Limiar: {self.price_threshold}%")
        
        self.price_history = self.load_price_history()
        
        # Headers para simular um browser real
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Linux; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
            'Accept-Encoding': 'identity',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
        }

    def load_price_history(self):
        """Carrega hist√≥rico de pre√ßos"""
        if os.path.exists(self.price_history_file):
            try:
                with open(self.price_history_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"Erro ao carregar hist√≥rico: {e}")
        return []

    def save_price_history(self):
        """Salva hist√≥rico de pre√ßos"""
        try:
            os.makedirs(os.path.dirname(self.price_history_file), exist_ok=True)
            with open(self.price_history_file, 'w', encoding='utf-8') as f:
                json.dump(self.price_history, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"Erro ao salvar hist√≥rico: {e}")

    def create_driver(self):
        """Cria driver do Selenium otimizado para cloud"""
        chrome_options = Options()
        
        # Configura√ß√µes essenciais para cloud/headless
        chrome_options.add_argument('--headless=new')  # Novo modo headless
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--disable-extensions')
        chrome_options.add_argument('--disable-logging')
        chrome_options.add_argument('--disable-web-security')
        chrome_options.add_argument('--ignore-certificate-errors')
        chrome_options.add_argument('--ignore-ssl-errors')
        chrome_options.add_argument('--allow-running-insecure-content')
        chrome_options.add_argument('--disable-background-timer-throttling')
        chrome_options.add_argument('--disable-backgrounding-occluded-windows')
        chrome_options.add_argument('--disable-renderer-backgrounding')
        chrome_options.add_argument('--disable-features=TranslateUI')
        chrome_options.add_argument('--disable-default-apps')
        chrome_options.add_argument('--no-first-run')
        chrome_options.add_argument('--disable-background-networking')
        chrome_options.add_argument('--disable-sync')
        
        # Definir user agent
        chrome_options.add_argument(f'--user-agent={self.headers["User-Agent"]}')
        
        # Configura√ß√µes de performance
        chrome_options.add_argument('--memory-pressure-off')
        chrome_options.add_argument('--max_old_space_size=4096')
        chrome_options.add_argument('--aggressive-cache-discard')
        
        # Configurar tamanho da janela
        chrome_options.add_argument('--window-size=1920,1080')
        
        try:
            # Instalar ChromeDriver automaticamente
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            driver.set_page_load_timeout(30)
            logger.info("‚úÖ Driver do Chrome criado com sucesso")
            return driver
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar driver: {e}")
            return None

    def fetch_price(self):
        """Busca pre√ßos usando Selenium"""
        driver = None
        try:
            driver = self.create_driver()
            if not driver:
                return None
            
            logger.info(f"üåê Acessando URL: {self.url}")
            driver.get(self.url)
            
            # Aguardar JavaScript carregar
            logger.info("‚è≥ Aguardando JavaScript carregar...")
            time.sleep(5)
            
            # Aguardar elemento de pre√ßo aparecer
            try:
                WebDriverWait(driver, 20).until(
                    EC.presence_of_element_located((By.TAG_NAME, "body"))
                )
            except TimeoutException:
                logger.warning("Timeout aguardando p√°gina carregar")
            
            # Aguardar um pouco mais para garantir que os pre√ßos s√£o carregados
            time.sleep(3)
            
            # Obter HTML da p√°gina renderizada
            html_content = driver.page_source
            
            # Salvar HTML para debug
            with open('/app/data/debug_page_rendered.html', 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            # Buscar pre√ßos no HTML renderizado
            price_patterns = [
                r'R\$\s*(\d{1,3}(?:\.\d{3})*,\d{2})',  # R$ 1.234,56
                r'(\d{1,3}(?:\.\d{3})*,\d{2})',        # 1.234,56
                r'(\d{1,3}(?:,\d{3})*\.\d{2})',        # 1,234.56
            ]
            
            all_prices = []
            for pattern in price_patterns:
                matches = re.findall(pattern, html_content)
                all_prices.extend(matches)
            
            # Filtrar pre√ßos v√°lidos (acima de R$ 100)
            valid_prices = []
            for price_str in all_prices:
                try:
                    # Normalizar formato brasileiro (v√≠rgula para ponto)
                    if ',' in price_str and '.' in price_str:
                        # Formato: 1.234,56
                        price_clean = price_str.replace('.', '').replace(',', '.')
                    elif ',' in price_str:
                        # Formato: 234,56
                        price_clean = price_str.replace(',', '.')
                    else:
                        # Formato: 234.56
                        price_clean = price_str
                    
                    price_value = float(price_clean)
                    if 100 <= price_value <= 10000:  # Filtro de pre√ßos razo√°veis
                        valid_prices.append(price_value)
                except ValueError:
                    continue
            
            if valid_prices:
                valid_prices.sort()
                daily_price = min(valid_prices)  # Menor pre√ßo (provavelmente di√°ria)
                total_price = max(valid_prices)  # Maior pre√ßo (provavelmente total)
                
                logger.info(f"üí∞ Pre√ßos detectados:")
                logger.info(f"   üìÖ Di√°ria: R$ {daily_price:.2f} ‚Üí R$ {daily_price * (1 - self.discount_percent/100):.2f} (com {self.discount_percent}% desconto)")
                logger.info(f"   üìä Total: R$ {total_price:.2f} ‚Üí R$ {total_price * (1 - self.discount_percent/100):.2f} (com {self.discount_percent}% desconto)")
                
                return {
                    'timestamp': datetime.now().isoformat(),
                    'daily_price': daily_price,
                    'total_price': total_price,
                    'daily_price_discounted': daily_price * (1 - self.discount_percent/100),
                    'total_price_discounted': total_price * (1 - self.discount_percent/100),
                    'discount_percent': self.discount_percent
                }
            else:
                logger.warning("‚ùå Nenhum pre√ßo encontrado")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar pre√ßos: {e}")
            return None
        finally:
            if driver:
                try:
                    driver.quit()
                    logger.debug("üîí Driver do Selenium fechado")
                except:
                    pass

    def send_telegram_notification(self, message):
        """Envia notifica√ß√£o para o Telegram"""
        if not self.telegram_bot_token or not self.telegram_chat_id:
            logger.warning("‚ö†Ô∏è Telegram n√£o configurado")
            return False
        
        try:
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            payload = {
                'chat_id': self.telegram_chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                logger.info("üì± Notifica√ß√£o Telegram enviada com sucesso")
                return True
            else:
                logger.error(f"‚ùå Erro Telegram: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar Telegram: {e}")
            return False

    def record_price(self, price_info):
        """Registra pre√ßo no hist√≥rico e verifica alertas"""
        self.price_history.append(price_info)
        
        # Manter apenas os √∫ltimos 100 registros
        if len(self.price_history) > 100:
            self.price_history = self.price_history[-100:]
        
        # Salvar hist√≥rico
        self.save_price_history()
        
        # Verificar se deve enviar alerta
        if len(self.price_history) >= 2:
            current = price_info['total_price_discounted']
            previous = self.price_history[-2]['total_price_discounted']
            
            if previous > current:
                drop_percent = ((previous - current) / previous) * 100
                
                if drop_percent >= self.price_threshold:
                    # Enviar alerta
                    current_time = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
                    message = f"""
üéâ *PRE√áO ABAIXOU {drop_percent:.1f}%!*

*Hospedagem:* StayCharlie Nik Pinheiros
*Data:* 08-12/09/2025 (4 noites)

üí∞ *Novo pre√ßo:*
üìÖ Di√°ria: R$ {price_info['daily_price']:.2f} ‚Üí R$ {price_info['daily_price_discounted']:.2f}
üìä Total: R$ {price_info['total_price']:.2f} ‚Üí R$ {price_info['total_price_discounted']:.2f}

üí° *Com cupom 5ANOS ({self.discount_percent}% desconto)*

üîó [Reservar agora]({self.url})

‚è∞ Verificado em: {current_time}
                    """
                    
                    logger.info(f"üéâ PRE√áO ABAIXOU {drop_percent:.1f}%! De R$ {previous:.2f} para R$ {current:.2f} (com cupom)")
                    self.send_telegram_notification(message.strip())

    def run_once(self):
        """Executa uma verifica√ß√£o"""
        price_info = self.fetch_price()
        if price_info is not None:
            self.record_price(price_info)
            return True
        return False

    def run_monitor(self):
        """Executa o monitor em loop cont√≠nuo"""
        logger.info(f"üöÄ Iniciando monitoramento de pre√ßos para: {self.url}")
        logger.info(f"‚è∞ Intervalo de verifica√ß√£o: {self.check_interval} minutos")
        
        while True:
            try:
                self.run_once()
                
                # Aguarda pr√≥xima verifica√ß√£o
                sleep_seconds = self.check_interval * 60
                logger.info(f"üò¥ Pr√≥xima verifica√ß√£o em {self.check_interval} minutos...")
                time.sleep(sleep_seconds)
                
            except KeyboardInterrupt:
                logger.info("üõë Monitoramento interrompido pelo usu√°rio")
                break
            except Exception as e:
                logger.error(f"‚ùå Erro inesperado: {e}")
                logger.info("‚è≥ Aguardando 5 minutos antes de tentar novamente...")
                time.sleep(300)  # 5 minutos

def main():
    parser = argparse.ArgumentParser(description='Monitor de pre√ßos StayCharlie - Cloud')
    parser.add_argument('--once', action='store_true', help='Executa apenas uma verifica√ß√£o')
    parser.add_argument('--test', action='store_true', help='Testa notifica√ß√£o do Telegram')
    
    args = parser.parse_args()
    
    monitor = StayCharliePriceMonitorCloud()
    
    if args.test:
        logger.info("üß™ Testando notifica√ß√£o do Telegram...")
        current_time = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        test_message = f"""
üéâ *TESTE DE NOTIFICA√á√ÉO* üéâ

Hospedagem StayCharlie - Pinheiros
Este √© um teste para verificar se as notifica√ß√µes est√£o funcionando!

üìÖ Di√°ria: R$ 312,37 ‚Üí R$ 234,28 (com 25% cupom)
üìä Total: R$ 1.414,50 ‚Üí R$ 1.060,88 (com 25% cupom)

üîó [Link da hospedagem]({monitor.url})

‚è∞ Testado em: {current_time}
        """
        
        success = monitor.send_telegram_notification(test_message.strip())
        logger.info("‚úÖ Teste conclu√≠do com sucesso!" if success else "‚ùå Erro no teste")
    elif args.once:
        success = monitor.run_once()
        logger.info("‚úÖ Verifica√ß√£o conclu√≠da" if success else "‚ùå Erro na verifica√ß√£o")
    else:
        monitor.run_monitor()

if __name__ == "__main__":
    main()
