#!/usr/bin/env python3
"""
Monitor de Pre√ßos StayCharlie - Vers√£o Cloud
Adaptado para hospedagem gratuita (Railway, Render, Fly.io)
"""

import os
import json
import time
import logging
import requests
import argparse
from datetime import datetime
import pytz
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
# Removido webdriver_manager - usando chromedriver instalado manualmente
import re

# Configura√ß√£o de logging
import sys

# Configurar handler para stdout (n√£o stderr) para evitar Railway interpretar como erro
stdout_handler = logging.StreamHandler(sys.stdout)
stdout_handler.setLevel(logging.INFO)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/app/data/price_monitor.log'),
        stdout_handler
    ]
)

logger = logging.getLogger(__name__)

def get_brasilia_time():
    """Retorna datetime no timezone de Bras√≠lia"""
    brasilia_tz = pytz.timezone('America/Sao_Paulo')
    return datetime.now(brasilia_tz)

def calculate_nights(start_date_str, end_date_str):
    """Calcula n√∫mero de noites entre duas datas"""
    try:
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d')
        return (end_date - start_date).days
    except:
        return 4  # Fallback padr√£o

class StayCharliePriceMonitorCloud:
    def __init__(self):
        # Configura√ß√µes via vari√°veis de ambiente
        self.price_history_file = '/app/data/price_history.json'
        self.telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.check_interval = int(os.getenv('CHECK_INTERVAL_MINUTES', '30'))
        self.price_threshold = float(os.getenv('PRICE_THRESHOLD_PERCENT', '0.0'))
        self.discount_percent = float(os.getenv('DISCOUNT_PERCENT', '25.0'))
        
        # Carrega configura√ß√£o de unidades e per√≠odo (priorita ENV vars)
        self.config = self.load_config()
        self.price_history = self.load_price_history()
        self.units = self.get_enabled_units()
        
        logger.info("üöÄ StayCharlie Monitor Cloud iniciado")
        enabled_units = [unit['name'] for unit in self.units]
        logger.info(f"üè† Monitorando {len(enabled_units)} unidade(s):")
        for unit in self.units:
            logger.info(f"  ‚Ä¢ {unit['name']} ({unit['slug']})")
        logger.info(f"‚è∞ Intervalo: {self.check_interval} minutos")
        logger.info(f"üìâ Limiar: {self.price_threshold}%")
        
        # Headers para simular um browser real
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Linux; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
            'Accept-Encoding': 'identity',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
        }
        
    def load_config(self):
        """Carrega configura√ß√£o priorizando ENV vars, com fallback para configura√ß√£o padr√£o"""
        default_config = {
            "monitoring_settings": {
                "city": "SP",
                "start_date": "2025-09-08", 
                "end_date": "2025-09-12",
                "guests": 1
            },
            "units_to_monitor": [
                {
                    "name": "Charlie Nik Pinheiros",
                    "slug": "charlie-nik-pinheiros",
                    "enabled": True
                },
                {
                    "name": "Smart Charlie Mobi Pinheiros",
                    "slug": "smart-charlie-mobi-pinheiros", 
                    "enabled": True
                }
            ]
        }
        
        # Override com ENV vars se dispon√≠veis
        city = os.getenv('MONITOR_CITY')
        start_date = os.getenv('MONITOR_START_DATE') 
        end_date = os.getenv('MONITOR_END_DATE')
        guests = os.getenv('MONITOR_GUESTS')
        
        if city:
            default_config['monitoring_settings']['city'] = city
        if start_date:
            default_config['monitoring_settings']['start_date'] = start_date
        if end_date:
            default_config['monitoring_settings']['end_date'] = end_date
        if guests:
            default_config['monitoring_settings']['guests'] = int(guests)
            
        return default_config
        
    def get_enabled_units(self):
        """Retorna lista de unidades habilitadas para monitoramento"""
        return [unit for unit in self.config.get('units_to_monitor', []) if unit.get('enabled', True)]
    
    def build_url(self, unit_slug):
        """Constr√≥i URL para uma unidade espec√≠fica baseado nas configura√ß√µes"""
        settings = self.config.get('monitoring_settings', {})
        
        base_url = f"https://www.staycharlie.com.br/{unit_slug}"
        params = []
        
        if settings.get('city'):
            params.append(f"city={settings['city']}")
        if settings.get('start_date'):
            params.append(f"start_date={settings['start_date']}")
        if settings.get('end_date'):
            params.append(f"end_date={settings['end_date']}")
        if settings.get('guests'):
            params.append(f"guests={settings['guests']}")
            
        if params:
            return f"{base_url}?{'&'.join(params)}"
        return base_url

    def load_price_history(self):
        """Carrega hist√≥rico de pre√ßos para m√∫ltiplas unidades"""
        if os.path.exists(self.price_history_file):
            try:
                with open(self.price_history_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)
                    # Se for uma lista (formato antigo), converte para o novo formato
                    if isinstance(history, list):
                        # Migra para novo formato se existir hist√≥rico antigo
                        if history:
                            return {"charlie-nik-pinheiros": history}
                        else:
                            return {}
                    return history
            except Exception as e:
                logger.error(f"Erro ao carregar hist√≥rico: {e}")
        return {}

    def save_price_history(self):
        """Salva hist√≥rico de pre√ßos"""
        try:
            os.makedirs(os.path.dirname(self.price_history_file), exist_ok=True)
            with open(self.price_history_file, 'w', encoding='utf-8') as f:
                json.dump(self.price_history, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"Erro ao salvar hist√≥rico: {e}")

    def create_driver(self):
        """Cria driver do Selenium otimizado para cloud"""
        chrome_options = Options()
        
        # Configura√ß√µes essenciais para cloud/headless
        chrome_options.add_argument('--headless=new')  # Novo modo headless
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--disable-extensions')
        chrome_options.add_argument('--disable-logging')
        chrome_options.add_argument('--disable-web-security')
        chrome_options.add_argument('--ignore-certificate-errors')
        chrome_options.add_argument('--ignore-ssl-errors')
        chrome_options.add_argument('--allow-running-insecure-content')
        chrome_options.add_argument('--disable-background-timer-throttling')
        chrome_options.add_argument('--disable-backgrounding-occluded-windows')
        chrome_options.add_argument('--disable-renderer-backgrounding')
        chrome_options.add_argument('--disable-features=TranslateUI')
        chrome_options.add_argument('--disable-default-apps')
        chrome_options.add_argument('--no-first-run')
        chrome_options.add_argument('--disable-background-networking')
        chrome_options.add_argument('--disable-sync')
        
        # Definir user agent
        chrome_options.add_argument(f'--user-agent={self.headers["User-Agent"]}')
        
        # Configura√ß√µes de performance
        chrome_options.add_argument('--memory-pressure-off')
        chrome_options.add_argument('--max_old_space_size=4096')
        chrome_options.add_argument('--aggressive-cache-discard')
        
        # Configurar tamanho da janela
        chrome_options.add_argument('--window-size=1920,1080')
        
        try:
            # Usar ChromeDriver instalado manualmente no container
            service = Service('/usr/local/bin/chromedriver')
            driver = webdriver.Chrome(service=service, options=chrome_options)
            driver.set_page_load_timeout(30)
            logger.info("‚úÖ Driver do Chrome criado com sucesso")
            return driver
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar driver: {e}")
            return None

    def fetch_price(self, url=None):
        """Busca pre√ßos usando Selenium"""
        # Se n√£o receber URL, usa self.url (compatibilidade com c√≥digo antigo)
        target_url = url if url is not None else getattr(self, 'url', None)
        
        if not target_url:
            logger.error("Nenhuma URL fornecida para fetch_price")
            return None
            
        driver = None
        try:
            driver = self.create_driver()
            if not driver:
                return None
            
            logger.info(f"üåê Acessando URL: {target_url}")
            driver.get(target_url)
            
            # Aguardar JavaScript carregar
            logger.info("‚è≥ Aguardando JavaScript carregar...")
            time.sleep(5)
            
            # Aguardar elemento de pre√ßo aparecer
            try:
                WebDriverWait(driver, 20).until(
                    EC.presence_of_element_located((By.TAG_NAME, "body"))
                )
            except TimeoutException:
                logger.info("‚è±Ô∏è Timeout aguardando p√°gina carregar - continuando...")
            
            # Aguardar um pouco mais para garantir que os pre√ßos s√£o carregados
            time.sleep(3)
            
            # Obter HTML da p√°gina renderizada
            html_content = driver.page_source
            
            # Salvar HTML para debug
            with open('/app/data/debug_page_rendered.html', 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            # Buscar pre√ßos no HTML renderizado
            # Primeiro, procurar especificamente por pre√ßos de di√°ria (com "noite")
            daily_price_patterns = [
                r'R\$\s*(\d{1,3}(?:\.\d{3})*,\d{2})\s*(?:/\s*)?noite',  # R$ 1.234,56 / noite
                r'(\d{1,3}(?:\.\d{3})*,\d{2})\s*(?:/\s*)?noite',        # 1.234,56 noite
                r'R\$\s*(\d{1,3}(?:\.\d{3})*,\d{2}).*?noite',           # R$ 1.234,56 [qualquer coisa] noite
                r'(\d{1,3}(?:\.\d{3})*,\d{2}).*?noite',                 # 1.234,56 [qualquer coisa] noite
            ]
            
            # Procurar por todos os pre√ßos (para pegar o total)
            all_price_patterns = [
                r'R\$\s*(\d{1,3}(?:\.\d{3})*,\d{2})',  # R$ 1.234,56
                r'(\d{1,3}(?:\.\d{3})*,\d{2})',        # 1.234,56
                r'(\d{1,3}(?:,\d{3})*\.\d{2})',        # 1,234.56
            ]
            
            # Buscar pre√ßos da di√°ria primeiro
            daily_prices = []
            for pattern in daily_price_patterns:
                matches = re.findall(pattern, html_content, re.IGNORECASE)
                daily_prices.extend(matches)
            
            # DEBUG: Log do que foi encontrado
            logger.info(f"üîç DEBUG - Pre√ßos com 'noite' encontrados: {daily_prices}")
            
            # DEBUG: Procurar todas as ocorr√™ncias de "noite" no HTML
            noite_contexts = re.findall(r'.{0,50}noite.{0,50}', html_content, re.IGNORECASE)
            logger.info(f"üîç DEBUG - Contextos com 'noite': {noite_contexts[:3]}")  # Primeiros 3
            
            # Buscar todos os pre√ßos
            all_prices = []
            for pattern in all_price_patterns:
                matches = re.findall(pattern, html_content)
                all_prices.extend(matches)
            
            # DEBUG: Log de todos os pre√ßos encontrados
            logger.info(f"üîç DEBUG - Todos os pre√ßos encontrados: {all_prices[:10]}")  # Primeiros 10
            
            # Fun√ß√£o helper para converter pre√ßos brasileiros
            def convert_brazilian_price(price_str):
                try:
                    # Normalizar formato brasileiro (v√≠rgula para ponto)
                    if ',' in price_str and '.' in price_str:
                        # Formato: 1.234,56
                        price_clean = price_str.replace('.', '').replace(',', '.')
                    elif ',' in price_str:
                        # Formato: 234,56
                        price_clean = price_str.replace(',', '.')
                    else:
                        # Formato: 234.56
                        price_clean = price_str
                    
                    price_value = float(price_clean)
                    if 100 <= price_value <= 10000:  # Filtro de pre√ßos razo√°veis
                        return price_value
                except ValueError:
                    pass
                return None
            
            # Processar pre√ßos da di√°ria (mais precisos)
            valid_daily_prices = []
            for price_str in daily_prices:
                converted = convert_brazilian_price(price_str)
                if converted:
                    valid_daily_prices.append(converted)
            
            # Processar todos os pre√ßos (para pegar o total)
            valid_all_prices = []
            for price_str in all_prices:
                converted = convert_brazilian_price(price_str)
                if converted:
                    valid_all_prices.append(converted)
            
            # Calcular n√∫mero de noites da configura√ß√£o
            try:
                config_data = self.load_config()
                start_date = config_data['monitoring_settings']['start_date']
                end_date = config_data['monitoring_settings']['end_date']
                nights = calculate_nights(start_date, end_date)
            except:
                nights = 4  # Fallback padr√£o
            
            # DEBUG: Log dos pre√ßos processados
            logger.info(f"üîç DEBUG - Pre√ßos da di√°ria v√°lidos: {valid_daily_prices}")
            logger.info(f"üîç DEBUG - Todos os pre√ßos v√°lidos: {valid_all_prices}")
            
            # L√≥gica inteligente usando pre√ßos da di√°ria quando dispon√≠vel
            if valid_daily_prices and valid_all_prices:
                # Temos pre√ßos espec√≠ficos da di√°ria!
                daily_price = valid_daily_prices[0]  # Usar o primeiro pre√ßo encontrado com "noite"
                
                # Para o total, pegar o maior pre√ßo (excluindo se for muito pr√≥ximo da di√°ria)
                valid_all_prices.sort()
                total_price = max(valid_all_prices)
                
                # Se o total for muito pr√≥ximo da di√°ria, calcular total = di√°ria √ó noites
                if abs(total_price - daily_price) / daily_price <= 0.1:
                    total_price = daily_price * nights
                    
                logger.info(f"üí∞ Pre√ßos detectados ({nights} noites) - DI√ÅRIA ESPEC√çFICA:")
                
            elif valid_all_prices:
                # Fallback para l√≥gica antiga se n√£o encontrar pre√ßo da di√°ria
                valid_all_prices.sort()
                total_price = max(valid_all_prices)
                daily_price = total_price / nights
                
                logger.info(f"üí∞ Pre√ßos detectados ({nights} noites) - CALCULADO:")
                
            else:
                logger.info("‚ÑπÔ∏è Nenhum pre√ßo encontrado nesta verifica√ß√£o")
                return None
            
            # Logs de pre√ßos encontrados
            logger.info(f"   üìÖ Di√°ria: R$ {daily_price:.2f} ‚Üí R$ {daily_price * (1 - self.discount_percent/100):.2f} (com {self.discount_percent}% desconto)")
            logger.info(f"   üìä Total: R$ {total_price:.2f} ‚Üí R$ {total_price * (1 - self.discount_percent/100):.2f} (com {self.discount_percent}% desconto)")
            
            return {
                'timestamp': get_brasilia_time().isoformat(),
                'daily_price': daily_price,
                'total_price': total_price,
                'daily_price_discounted': daily_price * (1 - self.discount_percent/100),
                'total_price_discounted': total_price * (1 - self.discount_percent/100),
                'discount_percent': self.discount_percent,
                'nights': nights
            }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar pre√ßos: {e}")
            return None
        finally:
            if driver:
                try:
                    driver.quit()
                    logger.debug("üîí Driver do Selenium fechado")
                except:
                    pass

    def send_telegram_notification(self, message):
        """Envia notifica√ß√£o para o Telegram"""
        if not self.telegram_bot_token or not self.telegram_chat_id:
            logger.info("‚ÑπÔ∏è Telegram n√£o configurado - pulando notifica√ß√£o")
            return False
        
        try:
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            payload = {
                'chat_id': self.telegram_chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                logger.info("üì± Notifica√ß√£o Telegram enviada com sucesso")
                return True
            else:
                logger.error(f"‚ùå Erro Telegram: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar Telegram: {e}")
            return False

    def log_price_check(self, unit_name, unit_slug, price_info):
        """Registra log detalhado de cada verifica√ß√£o de pre√ßo para cloud"""
        try:
            # Em ambiente cloud, usa logging ao inv√©s de arquivo local
            current_price = price_info['total_price_discounted']
            
            # Busca pre√ßo anterior do hist√≥rico
            unit_history = self.price_history.get(unit_slug, [])
            last_price = 0
            if len(unit_history) >= 2:
                last_price = unit_history[-2]['price_info']['total_price_discounted']
            
            # Calcula varia√ß√£o
            if last_price > 0:
                change_percent = ((current_price - last_price) / last_price) * 100
                change_status = "üìà SUBIU" if change_percent > 0.01 else "üìâ DESCEU" if change_percent < -0.01 else "üü° EST√ÅVEL"
                change_info = f"{change_percent:+.2f}%"
            else:
                change_status = "üÜï PRIMEIRO"
                change_info = "---"
            
            # Log detalhado no sistema cloud
            logger.info(f"üí∞ {unit_name} ({unit_slug}): R$ {last_price:.2f} ‚Üí R$ {current_price:.2f} ({change_status} {change_info})")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar log de verifica√ß√£o cloud: {e}")

    def record_price(self, price_info, unit_slug=None):
        """Registra pre√ßo no hist√≥rico para uma unidade espec√≠fica e verifica alertas"""
        # Se n√£o tiver unit_slug, usa como unidade padr√£o (compatibilidade)
        if unit_slug is None:
            unit_slug = "charlie-nik-pinheiros"
            
        # Inicializa hist√≥rico da unidade se n√£o existir
        if unit_slug not in self.price_history:
            self.price_history[unit_slug] = []
            
        unit_history = self.price_history[unit_slug]
        unit_name = price_info.get('unit_name', unit_slug)
        
        # Constr√≥i URL se n√£o estiver presente
        url = self.build_url(unit_slug)
        
        record = {
                'timestamp': get_brasilia_time().isoformat(),
            'price_info': price_info,
            'url': url,
            'unit_name': unit_name,
            'unit_slug': unit_slug,
            # Mant√©m compatibilidade com formato antigo
            'price': price_info['total_price_discounted']
        }
        
        unit_history.append(record)
        
        # Manter apenas os √∫ltimos 100 registros por unidade
        if len(unit_history) > 100:
            self.price_history[unit_slug] = unit_history[-100:]
        
        # Salvar hist√≥rico
        self.save_price_history()
        
        # üìù Log detalhado de verifica√ß√£o
        self.log_price_check(unit_name, unit_slug, price_info)
        
        # ‚úÖ SEMPRE verifica e notifica (mesmo sem mudan√ßa)
        if len(unit_history) >= 2:
            current = price_info['total_price_discounted']
            previous = unit_history[-2]['price_info']['total_price_discounted']
            change_percent = abs(((current - previous) / previous) * 100) if previous != 0 else 0
            
            # üé® T√≠tulos coloridos baseados na mudan√ßa
            if current < previous:
                emoji = "üü¢‚¨áÔ∏è"
                title = f"üü¢ PRE√áO DESCEU {change_percent:.1f}%!"
                log_msg = f"üü¢‚¨áÔ∏è PRE√áO DESCEU {change_percent:.1f}%!"
                change_desc = f"Queda de: {change_percent:.1f}%"
            elif current > previous:
                emoji = "üî¥‚¨ÜÔ∏è"
                title = f"üî¥ PRE√áO SUBIU {change_percent:.1f}%!"
                log_msg = f"üî¥‚¨ÜÔ∏è PRE√áO SUBIU {change_percent:.1f}%!"
                change_desc = f"Aumento de: {change_percent:.1f}%"
            else:
                emoji = "üü°‚û°Ô∏è"
                title = "üü° PRE√áO EST√ÅVEL"
                log_msg = "üü°‚û°Ô∏è PRE√áO MANTIDO"
                change_desc = "Sem altera√ß√£o"
        else:
            # Primeira verifica√ß√£o
            emoji = "üÜï"
            title = "üü¶ PRIMEIRO REGISTRO!"
            log_msg = "üÜï Primeiro registro de pre√ßo!"
            change_desc = "Monitoramento iniciado"
            previous = 0
            current = price_info['total_price_discounted']
        
        # ‚úÖ SEMPRE envia notifica√ß√£o
        current_time = get_brasilia_time().strftime('%d/%m/%Y %H:%M:%S')
        message = f"""
{emoji} *{title}*

üè† *Hospedagem:* {unit_name}

üí∞ *Pre√ßos:*
üìÖ Di√°ria: R$ {price_info['daily_price']:.2f} ‚Üí R$ {price_info['daily_price_discounted']:.2f}
üìä Total: R$ {price_info['total_price']:.2f} ‚Üí R$ {price_info['total_price_discounted']:.2f}
üìä {change_desc}

üí° *Com {self.discount_percent}% desconto aplicado*

üîó [Reservar agora]({url})

‚è∞ Verificado em: {current_time}
        """
        
        logger.info(f"{log_msg} Pre√ßo atual: R$ {current:.2f} (com desconto aplicado)")
        logger.info("üì± Enviando notifica√ß√£o no Telegram...")
        success = self.send_telegram_notification(message.strip())
        if success:
            logger.info("‚úÖ Notifica√ß√£o do Telegram enviada com sucesso")
        else:
            logger.error("‚ùå Falha ao enviar notifica√ß√£o do Telegram")

    def run_once(self):
        """Executa uma verifica√ß√£o para todas as unidades habilitadas"""
        all_success = True
        
        for unit in self.units:
            unit_name = unit.get('name', 'Unknown')
            unit_slug = unit.get('slug', '')
            
            if not unit_slug:
                logger.info(f"‚ÑπÔ∏è Unidade {unit_name} n√£o tem slug definido, pulando...")
                continue
                
            logger.info(f"üè† Verificando pre√ßos para: {unit_name}")
            
            url = self.build_url(unit_slug)
            price_info = self.fetch_price(url)
            
            if price_info is not None:
                # Adiciona informa√ß√µes da unidade
                price_info['unit_name'] = unit_name
                price_info['unit_slug'] = unit_slug
                self.record_price(price_info, unit_slug)
            else:
                all_success = False
                logger.error(f"‚ùå Falha ao verificar pre√ßos para {unit_name}")
        
        return all_success

    def run_monitor(self):
        """Executa o monitor em loop cont√≠nuo"""
        enabled_units = [unit['name'] for unit in self.units]
        logger.info(f"üöÄ Iniciando monitoramento cont√≠nuo para {len(enabled_units)} unidade(s)")
        logger.info(f"‚è∞ Intervalo de verifica√ß√£o: {self.check_interval} minutos")
        
        while True:
            try:
                self.run_once()
                
                # Aguarda pr√≥xima verifica√ß√£o
                sleep_seconds = self.check_interval * 60
                logger.info(f"üò¥ Pr√≥xima verifica√ß√£o em {self.check_interval} minutos...")
                time.sleep(sleep_seconds)
                
            except KeyboardInterrupt:
                logger.info("üõë Monitoramento interrompido pelo usu√°rio")
                break
            except Exception as e:
                logger.error(f"‚ùå Erro inesperado: {e}")
                logger.info("‚è≥ Aguardando 5 minutos antes de tentar novamente...")
                time.sleep(300)  # 5 minutos

def main():
    parser = argparse.ArgumentParser(description='Monitor de pre√ßos StayCharlie - Cloud')
    parser.add_argument('--once', action='store_true', help='Executa apenas uma verifica√ß√£o')
    parser.add_argument('--test', action='store_true', help='Testa notifica√ß√£o do Telegram')
    
    args = parser.parse_args()
    
    monitor = StayCharliePriceMonitorCloud()
    
    if args.test:
        logger.info("üß™ Testando notifica√ß√£o do Telegram...")
        current_time = get_brasilia_time().strftime('%d/%m/%Y %H:%M:%S')
        test_message = f"""
üéâ *TESTE DE NOTIFICA√á√ÉO* üéâ

Hospedagem StayCharlie - Pinheiros
Este √© um teste para verificar se as notifica√ß√µes est√£o funcionando!

üìÖ Di√°ria: R$ 312,37 ‚Üí R$ 234,28 (com 25% cupom)
üìä Total: R$ 1.414,50 ‚Üí R$ 1.060,88 (com 25% cupom)

üîó [Link da hospedagem](https://www.staycharlie.com.br)

‚è∞ Testado em: {current_time}
        """
        
        success = monitor.send_telegram_notification(test_message.strip())
        logger.info("‚úÖ Teste conclu√≠do com sucesso!" if success else "‚ùå Erro no teste")
    elif args.once:
        success = monitor.run_once()
        logger.info("‚úÖ Verifica√ß√£o conclu√≠da" if success else "‚ùå Erro na verifica√ß√£o")
    else:
        monitor.run_monitor()

if __name__ == "__main__":
    main()
