#!/bin/bash

# Script conveniente para o monitor de pre√ßos StayCharlie

show_help() {
    echo "üè® Monitor de Pre√ßos StayCharlie"
    echo "================================"
    echo ""
    echo "Uso: ./monitor.sh [comando]"
    echo ""
    echo "Comandos:"
    echo "  start        Inicia monitoramento cont√≠nuo em background"
    echo "  check        Executa verifica√ß√£o √∫nica"
    echo "  stop         Para o monitoramento em background"
    echo "  status       Mostra status do monitoramento"
    echo "  history      Mostra hist√≥rico de pre√ßos"
    echo "  config       Mostra configura√ß√£o atual"
    echo "  setup        Configura o ambiente inicial"
    echo ""
    echo "Exemplos:"
    echo "  ./monitor.sh setup     # Primeira configura√ß√£o"
    echo "  ./monitor.sh check     # Verifica√ß√£o √∫nica"
    echo "  ./monitor.sh start     # Inicia monitoramento"
    echo "  ./monitor.sh history   # Ver hist√≥rico"
}

setup() {
    echo "üì¶ Configurando ambiente..."
    if [ ! -f "venv/bin/activate" ]; then
        ./setup_monitor.sh
    else
        echo "‚úÖ Ambiente j√° configurado!"
    fi
}

start_monitor() {
    echo "üöÄ Iniciando monitoramento em background..."
    
    # Verifica se j√° est√° rodando
    if pgrep -f "price_monitor.py" > /dev/null; then
        echo "‚ö†Ô∏è  Monitor j√° est√° rodando!"
        echo "Use './monitor.sh status' para ver detalhes"
        return 1
    fi
    
    # Ativa ambiente e inicia monitor
    source venv/bin/activate
    nohup python price_monitor.py > monitor.log 2>&1 &
    
    echo "‚úÖ Monitor iniciado em background!"
    echo "üìÑ Logs em: monitor.log"
    echo "üîç Use './monitor.sh status' para verificar"
}

stop_monitor() {
    echo "‚èπÔ∏è  Parando monitoramento..."
    
    if pgrep -f "price_monitor.py" > /dev/null; then
        pkill -f "price_monitor.py"
        echo "‚úÖ Monitor parado!"
    else
        echo "‚ÑπÔ∏è  Monitor n√£o estava rodando"
    fi
}

show_status() {
    echo "üìä Status do Monitor"
    echo "==================="
    
    if pgrep -f "price_monitor.py" > /dev/null; then
        echo "üü¢ Status: RODANDO"
        echo "üîç PID: $(pgrep -f price_monitor.py)"
        echo ""
        echo "üìÑ √öltimas linhas do log:"
        tail -n 5 monitor.log 2>/dev/null || echo "Log n√£o encontrado"
    else
        echo "üî¥ Status: PARADO"
    fi
    
    if [ -f "price_history.json" ]; then
        echo ""
        echo "üìà √öltima verifica√ß√£o:"
        source venv/bin/activate 2>/dev/null
        python price_monitor.py --history | tail -n 1
    fi
}

check_once() {
    echo "üîç Executando verifica√ß√£o √∫nica..."
    source venv/bin/activate
    python price_monitor.py --once
}

show_history() {
    echo "üìä Hist√≥rico de Pre√ßos"
    echo "====================="
    source venv/bin/activate
    python price_monitor.py --history
}

show_config() {
    echo "‚öôÔ∏è  Configura√ß√£o Atual"
    echo "====================="
    source venv/bin/activate
    python price_monitor.py --config
}

# Verifica se est√° no diret√≥rio correto
if [ ! -f "price_monitor.py" ]; then
    echo "‚ùå Erro: Execute este script no diret√≥rio do projeto"
    exit 1
fi

# Processa comando
case "$1" in
    "setup")
        setup
        ;;
    "start")
        setup
        start_monitor
        ;;
    "stop")
        stop_monitor
        ;;
    "status")
        show_status
        ;;
    "check")
        setup
        check_once
        ;;
    "history")
        show_history
        ;;
    "config")
        show_config
        ;;
    "help"|"--help"|"-h")
        show_help
        ;;
    "")
        show_help
        ;;
    *)
        echo "‚ùå Comando inv√°lido: $1"
        echo ""
        show_help
        exit 1
        ;;
esac